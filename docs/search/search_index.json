{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selenium Tools Selenium-Tools provides the following tools for use with Selenium .: Send/receive datetime.datetime objects from web forms. Drag range sliders to specified values. Installation $ pip install selenium-tools Quickstart First, clone an example file from the Selenium-Tools repo. $ curl https://raw.githubusercontent.com/dsbowen/selenium-tools/master/form.html --output form.html Let's send the current date and time to all input in the form. from selenium_tools import get_datetime, send_datetime from selenium.webdriver import Chrome from datetime import datetime driver = Chrome() driver.get('data:text/html,'+open('form.html').read()) datetime_ = datetime.utcnow() css_selectors = ( 'input[type=date]', 'input[type=datetime-local]', 'input[type=month]', 'input[type=time]', 'input[type=week]' ) for selector in css_selectors: input_ = driver.find_element_by_css_selector(selector) send_datetime(input_, datetime_) print(get_datetime( input_.get_attribute('type'), input_.get_property('value') )) You'll see the form filled in in your selenium browser and receive the following output in your terminal: 2020-06-30 00:00:00 2020-06-30 15:47:00 2020-06-01 00:00:00 1900-01-01 15:47:00 2020-01-01 00:00:00 We can also drag the range slider as follows: from selenium_tools import drag_range range_ = driver.find_element_by_css_selector('input[type=range]') drag_range(driver, range_, 80) range_.get_property('value') Out: '80' Citation @software{bowen2020selenium-tools, author = {Dillon Bowen}, title = {Selenium-Tools}, url = {https://dsbowen.github.io/selenium-tools/}, date = {2020-06-29}, } License Users must cite this package in any publications which use it. It is licensed with the MIT License .","title":"Home"},{"location":"#selenium-tools","text":"Selenium-Tools provides the following tools for use with Selenium .: Send/receive datetime.datetime objects from web forms. Drag range sliders to specified values.","title":"Selenium Tools"},{"location":"#installation","text":"$ pip install selenium-tools","title":"Installation"},{"location":"#quickstart","text":"First, clone an example file from the Selenium-Tools repo. $ curl https://raw.githubusercontent.com/dsbowen/selenium-tools/master/form.html --output form.html Let's send the current date and time to all input in the form. from selenium_tools import get_datetime, send_datetime from selenium.webdriver import Chrome from datetime import datetime driver = Chrome() driver.get('data:text/html,'+open('form.html').read()) datetime_ = datetime.utcnow() css_selectors = ( 'input[type=date]', 'input[type=datetime-local]', 'input[type=month]', 'input[type=time]', 'input[type=week]' ) for selector in css_selectors: input_ = driver.find_element_by_css_selector(selector) send_datetime(input_, datetime_) print(get_datetime( input_.get_attribute('type'), input_.get_property('value') )) You'll see the form filled in in your selenium browser and receive the following output in your terminal: 2020-06-30 00:00:00 2020-06-30 15:47:00 2020-06-01 00:00:00 1900-01-01 15:47:00 2020-01-01 00:00:00 We can also drag the range slider as follows: from selenium_tools import drag_range range_ = driver.find_element_by_css_selector('input[type=range]') drag_range(driver, range_, 80) range_.get_property('value') Out: '80'","title":"Quickstart"},{"location":"#citation","text":"@software{bowen2020selenium-tools, author = {Dillon Bowen}, title = {Selenium-Tools}, url = {https://dsbowen.github.io/selenium-tools/}, date = {2020-06-29}, }","title":"Citation"},{"location":"#license","text":"Users must cite this package in any publications which use it. It is licensed with the MIT License .","title":"License"},{"location":"api/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } API selenium_tools. drag_range def selenium_tools. drag_range ( driver, range_, target, horizontal=True, tol=0, max_iter=10 ) [source] Drag a range slider to a desired target value. Parameters: driver : selenium.webdriver.chrome.webdriver.WebDriver or other webdriver Webdriver in which the form is open. range_ : selenium.webdriver.remote.webelement.WebElement The range slider to be dragged. target : float Target value to which the sider should be dragged. horizontal : bool, default=True Indicates the slider is oriented horizontally, as opposed to vertically. tol : float, default=0 Tolerance for error if the slider cannot be dragged to the exact target. max_iter : int, default=10 Maximum number of iterations for the slider to reach the target. Returns: delta : float Remaining difference between the target and actual value. Examples from selenium_tools import drag_range from selenium.webdriver import Chrome driver = Chrome() driver.get('data:text/html,<input type=\"range\">') range_ = driver.find_element_by_css_selector('input[type=range]') drag_range(driver, range_, 80) range_.get_property('value') Out: '80' selenium_tools. send_datetime def selenium_tools. send_datetime ( input_, datetime_ ) [source] Send a datetime object to a form input. Parameters: input_ : selenium.webdriver.remote.webelement.WebElement The form input to which the datetime object will be sent. datetime_ : datetime.datetime The datetime object to be sent. Examples from selenium_tools import send_datetime from selenium.webdriver import Chrome from datetime import datetime driver = Chrome() driver.get('data:text/html,<input type=\"date\">') input_ = driver.find_element_by_css_selector('input[type=date]') send_datetime(input_, datetime.utcnow()) You should see the current date entered in the date input field in your browser. selenium_tools. get_datetime def selenium_tools. get_datetime ( input_type, response ) [source] Get a datetime object from a form response after a POST request. Parameters: input_type : str Type of the input tag. response : str Response to the input tag. Returns: datetime : datetime.datetime The response converted to a datetime object if possible, otherwise the raw response. This method will fail to convert the response if the input type is invalid or if the client did not enter a response in this input tag. Examples from selenium_tools import get_datetime, send_datetime from selenium.webdriver import Chrome from datetime import datetime driver = Chrome() driver.get('data:text/html,<input type=\"date\">') input_ = driver.find_element_by_css_selector('input[type=date]') send_datetime(input_, datetime.utcnow()) get_datetime(input_.get_attribute('type'), input_.get_property('value')) Out: datetime.datetime(2020, 6, 30, 0, 0)","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#selenium_toolsdrag_range","text":"def selenium_tools. drag_range ( driver, range_, target, horizontal=True, tol=0, max_iter=10 ) [source] Drag a range slider to a desired target value. Parameters: driver : selenium.webdriver.chrome.webdriver.WebDriver or other webdriver Webdriver in which the form is open. range_ : selenium.webdriver.remote.webelement.WebElement The range slider to be dragged. target : float Target value to which the sider should be dragged. horizontal : bool, default=True Indicates the slider is oriented horizontally, as opposed to vertically. tol : float, default=0 Tolerance for error if the slider cannot be dragged to the exact target. max_iter : int, default=10 Maximum number of iterations for the slider to reach the target. Returns: delta : float Remaining difference between the target and actual value.","title":"selenium_tools.drag_range"},{"location":"api/#examples","text":"from selenium_tools import drag_range from selenium.webdriver import Chrome driver = Chrome() driver.get('data:text/html,<input type=\"range\">') range_ = driver.find_element_by_css_selector('input[type=range]') drag_range(driver, range_, 80) range_.get_property('value') Out: '80'","title":"Examples"},{"location":"api/#selenium_toolssend_datetime","text":"def selenium_tools. send_datetime ( input_, datetime_ ) [source] Send a datetime object to a form input. Parameters: input_ : selenium.webdriver.remote.webelement.WebElement The form input to which the datetime object will be sent. datetime_ : datetime.datetime The datetime object to be sent.","title":"selenium_tools.send_datetime"},{"location":"api/#examples_1","text":"from selenium_tools import send_datetime from selenium.webdriver import Chrome from datetime import datetime driver = Chrome() driver.get('data:text/html,<input type=\"date\">') input_ = driver.find_element_by_css_selector('input[type=date]') send_datetime(input_, datetime.utcnow()) You should see the current date entered in the date input field in your browser.","title":"Examples"},{"location":"api/#selenium_toolsget_datetime","text":"def selenium_tools. get_datetime ( input_type, response ) [source] Get a datetime object from a form response after a POST request. Parameters: input_type : str Type of the input tag. response : str Response to the input tag. Returns: datetime : datetime.datetime The response converted to a datetime object if possible, otherwise the raw response. This method will fail to convert the response if the input type is invalid or if the client did not enter a response in this input tag.","title":"selenium_tools.get_datetime"},{"location":"api/#examples_2","text":"from selenium_tools import get_datetime, send_datetime from selenium.webdriver import Chrome from datetime import datetime driver = Chrome() driver.get('data:text/html,<input type=\"date\">') input_ = driver.find_element_by_css_selector('input[type=date]') send_datetime(input_, datetime.utcnow()) get_datetime(input_.get_attribute('type'), input_.get_property('value')) Out: datetime.datetime(2020, 6, 30, 0, 0)","title":"Examples"},{"location":"requests/","text":"Get datetime objects from a form You can also get datetime.datetime objects from a form using Flask requests . Create this simple Flask app in app.py . from datetime_selenium import get_datetime from flask import Flask, request app = Flask(__name__) @app.route('/', methods=['GET','POST']) def index(): if request.method == 'POST': for html_type, val in request.form.items(): print(get_datetime(html_type, val)) return open('form.html').read() if __name__ == '__main__': app.run(debug=True) If you haven't already, download form.html . $ curl https://raw.githubusercontent.com/dsbowen/datetime-selenium/master/form.html --output form.html Run the app from your terminal. $ python app.py And navigate to http://localhost:5000/ in your browser. Fill in the web form and hit the submit button. You'll see the datetime.datetime objects printed in your terminal.","title":"Get datetime objects from a form"},{"location":"requests/#get-datetime-objects-from-a-form","text":"You can also get datetime.datetime objects from a form using Flask requests . Create this simple Flask app in app.py . from datetime_selenium import get_datetime from flask import Flask, request app = Flask(__name__) @app.route('/', methods=['GET','POST']) def index(): if request.method == 'POST': for html_type, val in request.form.items(): print(get_datetime(html_type, val)) return open('form.html').read() if __name__ == '__main__': app.run(debug=True) If you haven't already, download form.html . $ curl https://raw.githubusercontent.com/dsbowen/datetime-selenium/master/form.html --output form.html Run the app from your terminal. $ python app.py And navigate to http://localhost:5000/ in your browser. Fill in the web form and hit the submit button. You'll see the datetime.datetime objects printed in your terminal.","title":"Get datetime objects from a form"}]}